import TelegramBot, {type Message} from 'node-telegram-bot-api';
import {analyzeDriverComparison} from './modules/analysis/comparison.js';
import {askAI} from './modules/ai/open-router.js';
import {findOrCreateUser, grantConsent} from './core/user-service.js';
import {PrismaClient} from '@prisma/client';

const prisma = new PrismaClient();

export class F1Bot {
    private bot: TelegramBot;
    private openRouterKey?: string;

    constructor(token: string, openRouterKey?: string) {
        this.bot = new TelegramBot(token, {polling: true});
        this.openRouterKey = openRouterKey;
    }

    // Middleware for user creation and message logging (TZ: 3.9)
    private async onAnyMessage(msg: Message) {
        if (!msg.from || !msg.text) return;

        try {
            const user = await findOrCreateUser(msg.from);
            await prisma.message.create({
                data: {
                    userId: user.id,
                    role: 'user',
                    content: msg.text,
                }
            });
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –≤ onAnyMessage middleware:", error);
        }
    }

    private setupCommands() {
        this.bot.on('message', this.onAnyMessage.bind(this));

        // Onboarding and Consent (TZ: 3.1)
        this.bot.onText(/\/start/, async (msg) => {
            const chatId = msg.chat.id;
            const policyText = "–î–ª—è —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –Ω–∞—à—É –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.";
            const options = {
                reply_markup: {
                    inline_keyboard: [
                        [{text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É v1.0", callback_data: "consent_accept_v1.0"}],
                        [{text: "üìÑ –ß–∏—Ç–∞—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É (—Å—Å—ã–ª–∫–∞)", url: "https://github.com/hilarylfg"}]
                    ]
                }
            };
            await this.bot.sendMessage(chatId, `üèéÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ F1 Analyst Bot!\n\n${policyText}`, options);
        });

        this.bot.on('callback_query', async (query) => {
            if (query.data === 'consent_accept_v1.0' && query.from && query.message) {
                const user = await findOrCreateUser(query.from);
                await grantConsent(user.id, '1.0');
                await this.bot.answerCallbackQuery(query.id, {text: "–°–ø–∞—Å–∏–±–æ! –°–æ–≥–ª–∞—Å–∏–µ –ø—Ä–∏–Ω—è—Ç–æ."});
                await this.bot.editMessageText("–°–æ–≥–ª–∞—Å–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.", {
                    chat_id: query.message.chat.id,
                    message_id: query.message.message_id,
                });
                await this.bot.sendMessage(query.message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.");
            }
        });

        // Help command (TZ: 3.3)
        this.bot.onText(/\/help/, (msg) => {
            // === –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê ===
            const helpText = `*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n` +
                `\`/compare <–ü–∏–ª–æ—Ç1> vs <–ü–∏–ª–æ—Ç2>\` - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –ø–∏–ª–æ—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º.\n\n` +
                `\`/ask <–í–∞—à –≤–æ–ø—Ä–æ—Å>\` - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò-–∞–Ω–∞–ª–∏—Ç–∏–∫—É –æ –§–æ—Ä–º—É–ª–µ 1.\n\n` +
                `\`/reset\` - –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).\n\n` +
                `\`/profile\` - –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).\n\n` +
                `\`/privacy\` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª–∏—Ç–∏–∫–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.`;
            // ============================
            this.bot.sendMessage(msg.chat.id, helpText, {parse_mode: 'Markdown'});
        });

        // Core analysis feature
        // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /compare
        this.bot.onText(/\/compare (.+) vs (.+)/, async (msg, match) => {
            const chatId = msg.chat.id;

            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ò–ò
            if (!this.openRouterKey) {
                await this.bot.sendMessage(chatId, "‚ùå –ö–æ–º–∞–Ω–¥–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API –∫–ª—é—á –¥–ª—è –ò–ò.");
                return;
            }

            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            if (!match || !match[1] || !match[2]) {
                await this.bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `/compare –ü–∏–ª–æ—Ç1 vs –ü–∏–ª–æ—Ç2`");
                return;
            }

            const driver1 = match[1].trim();
            const driver2 = match[2].trim();

            try {
                // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç—å..."
                await this.bot.sendMessage(chatId, `‚è≥ –ù–µ–π—Ä–æ—Å–µ—Ç—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç: **${driver1}** vs **${driver2}**...`, { parse_mode: 'Markdown' });
                await this.bot.sendChatAction(chatId, 'typing');

                // 4. –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–π –∫–ª—é—á
                const textReport = await analyzeDriverComparison(driver1, driver2, this.openRouterKey);

                // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç –ò–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await this.bot.sendMessage(chatId, textReport, { parse_mode: 'Markdown' });

            } catch (error: any) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø–∏–ª–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ –ò–ò:", error);
                await this.bot.sendMessage(chatId, `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
            }
        });

        // AI Agent feature (TZ: 3.2)
        this.bot.onText(/\/ask (.+)/, async (msg, match) => {
            const chatId = msg.chat.id;
            if (!this.openRouterKey) return this.bot.sendMessage(chatId, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ—É–Ω–∫—Ü–∏—è –ò–ò-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.");
            if (!match || !match[1]) return this.bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ask –í–∞—à –≤–æ–ø—Ä–æ—Å');

            try {
                await this.bot.sendChatAction(chatId, 'typing');
                const answer = await askAI(match[1].trim(), this.openRouterKey);
                await this.bot.sendMessage(chatId, answer, {parse_mode: 'Markdown'});
            } catch (error: any) {
                await this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: ${error.message}`);
            }
        });

        // Stubs for other commands from TZ
        this.bot.onText(/\/reset/, (msg) => this.bot.sendMessage(msg.chat.id, "–ö–æ–º–∞–Ω–¥–∞ /reset –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –û–Ω–∞ –±—É–¥–µ—Ç –æ—á–∏—â–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò."));
        this.bot.onText(/\/profile/, (msg) => this.bot.sendMessage(msg.chat.id, "–ö–æ–º–∞–Ω–¥–∞ /profile –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —è–∑—ã–∫ –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å."));
        this.bot.onText(/\/privacy/, (msg) => this.bot.sendMessage(msg.chat.id, "–ö–æ–º–∞–Ω–¥–∞ /privacy –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–≥–ª–∞—Å–∏—è–º–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö."));
        this.bot.onText(/\/feedback/, (msg) => this.bot.sendMessage(msg.chat.id, "–ö–æ–º–∞–Ω–¥–∞ /feedback –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞."));
    }

    public start() {
        this.setupCommands();
    }
}
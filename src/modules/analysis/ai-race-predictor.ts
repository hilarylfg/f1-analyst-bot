import axios from 'axios';
import {askAI} from "../ai/open-router.js";

interface PredictionResult {
    driver: string;
    team: string;
    predictedPosition: number;
    podiumProbability: number;
    winProbability: number;
    reasoning: string;
}

const currentDate = new Date();

export class AIRacePredictor {
    private openRouterKey: string;

    constructor(openRouterKey: string) {
        this.openRouterKey = openRouterKey;
    }

    async predictRaceResults(trackName: string): Promise<{ predictions: PredictionResult[]; analysis: string }> {
        try {
            const currentSeasonData = await this.getCurrentSeasonData();

            const trackInfo = await this.getTrackInfo(trackName);

            const prediction = await this.generateRacePrediction(currentSeasonData, trackInfo, trackName);

            return prediction;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–∏–∫—Ü–∏–∏:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–∏–∫—Ü–∏—é –¥–ª—è –≥–æ–Ω–∫–∏');
        }
    }

    private async getCurrentSeasonData(): Promise<string> {
        const prompt = `
–ù–∞–π–¥–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –Ω–∞ ${currentDate.getFullYear()} –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ –§–æ—Ä–º—É–ª—ã 1:
- –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ –ø–∏–ª–æ—Ç–æ–≤ (—Ç–æ–ø-10)
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥, –ø–æ–¥–∏—É–º–æ–≤ –∏ –æ—á–∫–æ–≤ –∫–∞–∂–¥–æ–≥–æ –ø–∏–ª–æ—Ç–∞
- –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (3-5 –≥–æ–Ω–æ–∫)
- –¢–µ–∫—É—â–∞—è —Ñ–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–∏–ª–æ—Ç–æ–≤ (–∫—Ä—ç—à–∏, —Å—Ö–æ–¥—ã)

–ü—Ä–µ–¥—Å—Ç–∞–≤—å –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ.`;

        return await askAI(prompt, this.openRouterKey);
    }

    private async getTrackInfo(trackName: string): Promise<string> {
        const prompt = `
–ù–∞–π–¥–∏ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ ${currentDate.getFullYear()} –æ —Ç—Ä–∞—Å—Å–µ ${trackName} –≤ –§–æ—Ä–º—É–ª–µ 1:
- –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Ç—Ä–∞–Ω–∞
- –î–ª–∏–Ω–∞ —Ç—Ä–∞—Å—Å—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤–æ—Ä–æ—Ç–æ–≤
- –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–º–Ω–æ–≥–æ –ø—Ä—è–º—ã—Ö/—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–∫)
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–≥–æ–Ω–æ–≤ (–ª–µ–≥–∫–æ/—Å–ª–æ–∂–Ω–æ –æ–±–≥–æ–Ω—è—Ç—å)
- –ö–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã/–ø–∏–ª–æ—Ç—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ —Å–∏–ª—å–Ω—ã –Ω–∞ —ç—Ç–æ–π —Ç—Ä–∞—Å—Å–µ
- –í–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ç—Ä–∞—Å—Å—ã (DRS –∑–æ–Ω—ã, —Å–ª–æ–∂–Ω—ã–µ –ø–æ–≤–æ—Ä–æ—Ç—ã)

–ü—Ä–µ–¥—Å—Ç–∞–≤—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫—Ä–∞—Ç–∫–æ –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ.`;

        return await askAI(prompt, this.openRouterKey);
    }

    private async generateRacePrediction(seasonData: string, trackInfo: string, trackName: string): Promise<{
        predictions: PredictionResult[];
        analysis: string
    }> {
        const prompt = `
–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—É—é –ø—Ä–µ–¥–∏–∫—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–Ω–∫–∏ –§–æ—Ä–º—É–ª—ã 1:

–î–ê–ù–ù–´–ï –û –°–ï–ó–û–ù–ï:
${seasonData}

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–†–ê–°–°–ï:
${trackInfo}

–ó–ê–î–ê–ß–ê:
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–∞–≤—å –ø—Ä–µ–¥–∏–∫—Ü–∏—é –¥–ª—è –≥–æ–Ω–∫–∏ –Ω–∞ —Ç—Ä–∞—Å—Å–µ ${trackName}. 

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "predictions": [
    {
      "driver": "–ò–º—è –ü–∏–ª–æ—Ç–∞",
      "team": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã",
      "predictedPosition": —á–∏—Å–ª–æ_–æ—Ç_1_–¥–æ_20,
      "podiumProbability": –ø—Ä–æ—Ü–µ–Ω—Ç_–æ—Ç_0_–¥–æ_100,
      "winProbability": –ø—Ä–æ—Ü–µ–Ω—Ç_–æ—Ç_0_–¥–æ_100,
      "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏"
    }
  ],
  "analysis": "–æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –≥–æ–Ω–∫–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã"
}

–£—á—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã:
- –¢–µ–∫—É—â—É—é —Ñ–æ—Ä–º—É –ø–∏–ª–æ—Ç–æ–≤ –∏ –∫–æ–º–∞–Ω–¥
- –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –¥–∞–Ω–Ω–æ–π —Ç—Ä–∞—Å—Å–µ  
- –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞—Å—Å—ã –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
- –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–∏–ª–æ—Ç–æ–≤
- –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ç—Ä–∞—Å—Å—ã

–ü—Ä–µ–¥–∏–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –∏ –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–π –Ω–∞ –¥–∞–Ω–Ω—ã—Ö. –í–∫–ª—é—á–∏ —Ç–æ–ø-10 –ø–∏–ª–æ—Ç–æ–≤.`;

        const response = await askAI(prompt, this.openRouterKey);

        try {
            const parsed = JSON.parse(response);
            return parsed;
        } catch (error) {
            return this.parseUnstructuredResponse(response);
        }
    }

    private parseUnstructuredResponse(response: string): { predictions: PredictionResult[]; analysis: string } {
        const lines = response.split('\n');
        const predictions: PredictionResult[] = [];
        let analysis = response;

        lines.forEach((line, index) => {
            if (line.includes('1.') || line.includes('2.') || line.includes('3.')) {
                const match = line.match(/(\d+)\.\s*([^-]+)/);
                if (match) {
                    predictions.push({
                        driver: match[2].trim(),
                        team: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        predictedPosition: parseInt(match[1]),
                        podiumProbability: index < 3 ? 70 - index * 10 : 10,
                        winProbability: index === 0 ? 40 : index < 3 ? 20 - index * 5 : 5,
                        reasoning: '–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ò–ò'
                    });
                }
            }
        });

        return {predictions, analysis};
    }

    public formatPredictionMessage(result: { predictions: PredictionResult[]; analysis: string }): string {
        let message = 'üèÅ **–ü–†–ï–î–ò–ö–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ì–û–ù–ö–ò F1** üèÅ\n\n';

        result.predictions.slice(0, 10).forEach((pred, index) => {
            const positionEmoji = this.getPositionEmoji(pred.predictedPosition);

            message += `${positionEmoji} **${pred.driver}**`;
            if (pred.team !== '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
                message += ` _(${pred.team})_`;
            }
            message += '\n';
            message += `   üìç –ü–æ–∑–∏—Ü–∏—è: P${pred.predictedPosition}\n`;
            message += `   üèÜ –ü–æ–¥–∏—É–º: ${pred.podiumProbability}%\n`;
            message += `   üëë –ü–æ–±–µ–¥–∞: ${pred.winProbability}%\n`;
            message += `   üí≠ _${pred.reasoning}_\n\n`;
        });

        message += 'üìä **–ê–ù–ê–õ–ò–ó –ì–û–ù–ö–ò:**\n';
        message += result.analysis + '\n\n';
        message += 'ü§ñ *–ü—Ä–µ–¥–∏–∫—Ü–∏—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –§–æ—Ä–º—É–ª—ã 1*\n';
        message += '‚ö†Ô∏è *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–æ—Å—è—Ç –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö*';

        return message;
    }

    private getPositionEmoji(position: number): string {
        const emojis = ['ü•á', 'ü•à', 'ü•â', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü'];
        return emojis[position - 1] || `${position}.`;
    }

    async analyzeDriverForRace(driverName: string, trackName: string): Promise<string> {
        const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —à–∞–Ω—Å—ã –ø–∏–ª–æ—Ç–∞ ${driverName} –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –≥–æ–Ω–∫–µ –Ω–∞ —Ç—Ä–∞—Å—Å–µ ${trackName}.

–£—á—Ç–∏:
- –¢–µ–∫—É—â—É—é —Ñ–æ—Ä–º—É –ø–∏–ª–æ—Ç–∞ –≤ —Å–µ–∑–æ–Ω–µ
- –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –¥–∞–Ω–Ω–æ–π —Ç—Ä–∞—Å—Å–µ
- –°–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –µ–≥–æ –∫–æ–º–∞–Ω–¥—ã
- –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞—Å—Å—ã

–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (2-3 –∞–±–∑–∞—Ü–∞).`;

        return await askAI(prompt, this.openRouterKey);
    }

    async analyzePitStopStrategy(trackName: string): Promise<string> {
        const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–∏—Ç-—Å—Ç–æ–ø–æ–≤ –¥–ª—è –≥–æ–Ω–∫–∏ –Ω–∞ —Ç—Ä–∞—Å—Å–µ ${trackName}.

–†–∞—Å—Å–º–æ—Ç—Ä–∏:
- –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞—Å—Å—ã (–∏–∑–Ω–æ—Å —à–∏–Ω, –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–∏—Ç-–ª–µ–π–Ω–∞)
- –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
- –¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ—Å—Ç–∞–≤—ã —à–∏–Ω
- –§–∞–∫—Ç–æ—Ä—ã –ø–æ–≥–æ–¥—ã –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.`;

        return await askAI(prompt, this.openRouterKey);
    }
}
import {type OpenF1Driver, openF1Service, type OpenF1Session} from './openf1.js';

export interface RaceResult {
    track: string;
    position: string;
    no: number;
    driver: string;
    team: string;
    startingGrid: number;
    laps: number;
    timeRetired: string;
    points: number;
    setFastestLap: boolean;
    fastestLapTime: string;
}

export interface QualifyingResult {
    track: string;
    position: number;
    no: number;
    driver: string;
    team: string;
    q1: string;
    q2: string;
    q3: string;
    laps: number;
}

export interface DriverStanding {
    position: number;
    driver: string;
    team: string;
    points: number;
    wins: number;
    podiums: number;
    polePositions: number;
    fastestLaps: number;
    dnfs: number;
}

// –¢–∞–±–ª–∏—Ü–∞ –æ—á–∫–æ–≤ F1 2025
const POINTS_SYSTEM: { [position: number]: number } = {
    1: 25, 2: 18, 3: 15, 4: 12, 5: 10,
    6: 8, 7: 6, 8: 4, 9: 2, 10: 1
};

class OpenF1DataParser {
    private raceResults: RaceResult[] = [];
    private qualifyingResults: QualifyingResult[] = [];
    private drivers: OpenF1Driver[] = [];
    private races: OpenF1Session[] = [];
    private lastUpdate: number = 0;
    private updateInterval = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
    private isLoading: boolean = false;
    private loadingPromise: Promise<void> | null = null;
    private isInitialized: boolean = false;

    constructor() {
        // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º loadData() –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ (–Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º)
     */
    async initialize(): Promise<void> {
        if (this.isInitialized) {
            console.log('‚úÖ –ü–∞—Ä—Å–µ—Ä —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }

        if (this.loadingPromise) {
            console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏...');
            return this.loadingPromise;
        }

        this.loadingPromise = this.loadData();
        await this.loadingPromise;
        this.isInitialized = true;

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        setInterval(() => {
            if (!this.isLoading) {
                console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
                this.loadData();
            }
        }, this.updateInterval);
    }

    private async loadData(): Promise<void> {
        if (this.isLoading) {
            console.log('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
            return;
        }

        this.isLoading = true;
        try {
            console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ OpenF1 API...');

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∏–ª–æ—Ç–æ–≤ –∏ –≥–æ–Ω–∫–∏
            this.drivers = await openF1Service.getDrivers(2025);
            this.races = await openF1Service.getRaces(2025);

            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${this.drivers.length} –ø–∏–ª–æ—Ç–æ–≤ –∏ ${this.races.length} –≥–æ–Ω–æ–∫`);

            // –î–ï–ë–ê–ì: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∏–ª–æ—Ç–æ–≤
            console.log('\nüë• –°–ü–ò–°–û–ö –ü–ò–õ–û–¢–û–í:');
            this.drivers.forEach(d => {
                console.log(`   #${d.driver_number} - ${d.broadcast_name} (${d.team_name})`);
            });

            // –î–ï–ë–ê–ì: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ–Ω–æ–∫
            console.log('\nüèÅ –°–ü–ò–°–û–ö –ì–û–ù–û–ö:');
            this.races.forEach(r => {
                const isPast = new Date(r.date_start) < new Date();
                console.log(`   ${r.circuit_short_name || r.location} - ${r.date_start} ${isPast ? '‚úÖ –ø—Ä–æ—à–ª–∞' : '‚è∞ –±—É–¥—É—â–∞—è'}`);
            });

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–Ω–æ–∫ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û
            await this.loadRaceResults();

            this.lastUpdate = Date.now();

            console.log(`\n‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!`);
            console.log(`üìã –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–Ω–æ–∫: ${this.raceResults.length}`);
            console.log(`üìã –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞—Å—Å: ${this.getAllTracks().length}`);
            console.log(`üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∏–ª–æ—Ç–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö: ${new Set(this.raceResults.map(r => r.driver)).size}`);

            // –î–ï–ë–ê–ì: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            console.log('\nüîç –ü–†–ò–ú–ï–†–´ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í (–ø–µ—Ä–≤—ã–µ 5):');
            this.raceResults.slice(0, 5).forEach(r => {
                console.log(`   ${r.track}: P${r.position} - ${r.driver} (${r.team}) - ${r.points} –æ—á–∫–æ–≤`);
            });

            // –î–ï–ë–ê–ì: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç—Ä–∞—Å—Å–∞–º
            console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –¢–†–ê–°–°–ê–ú:');
            const trackStats = new Map<string, number>();
            this.raceResults.forEach(r => {
                trackStats.set(r.track, (trackStats.get(r.track) || 0) + 1);
            });
            trackStats.forEach((count, track) => {
                console.log(`   ${track}: ${count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ OpenF1:', error);
        } finally {
            this.isLoading = false;
            this.loadingPromise = null;
        }
    }

    private async loadRaceResults() {
        this.raceResults = [];

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—à–µ–¥—à–∏–µ –≥–æ–Ω–∫–∏
        const completedRaces = this.races.filter(race => new Date(race.date_start) < new Date());

        console.log(`\nüì• –ó–∞–≥—Ä—É–∂–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ${completedRaces.length} –ø—Ä–æ—à–µ–¥—à–∏—Ö –≥–æ–Ω–æ–∫...`);

        // –í–ê–ñ–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û, –∞ –Ω–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ!
        for (let i = 0; i < completedRaces.length; i++) {
            const race = completedRaces[i];

            try {
                console.log(`\n‚è≥ [${i + 1}/${completedRaces.length}] –ó–∞–≥—Ä—É–∑–∫–∞: ${race.circuit_short_name || race.location}`);
                console.log(`   Session Key: ${race.session_key}`);

                const positions = await openF1Service.getSessionPositions(race.session_key);

                console.log(`   üì¶ –ü–æ–ª—É—á–µ–Ω–æ ${positions.length} –∑–∞–ø–∏—Å–µ–π –æ –ø–æ–∑–∏—Ü–∏—è—Ö`);

                if (positions.length === 0) {
                    console.warn(`   ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∑–∏—Ü–∏—è—Ö`);
                    continue;
                }

                // –ë–µ—Ä–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∏–ª–æ—Ç–∞)
                const finalPositions = this.getFinalPositions(positions);

                console.log(`   ‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${finalPositions.length} —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π`);

                // –î–ï–ë–ê–ì: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3
                console.log(`   üèÜ –¢–æ–ø-3:`);
                finalPositions.slice(0, 3).forEach(pos => {
                    const driver = this.drivers.find(d => d.driver_number === pos.driver_number);
                    console.log(`      P${pos.position}: #${pos.driver_number} ${driver?.broadcast_name || 'Unknown'}`);
                });

                let addedCount = 0;
                finalPositions.forEach((pos) => {
                    const driver = this.drivers.find(d => d.driver_number === pos.driver_number);
                    if (!driver) {
                        console.warn(`   ‚ö†Ô∏è –ü–∏–ª–æ—Ç —Å –Ω–æ–º–µ—Ä–æ–º ${pos.driver_number} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                        return;
                    }

                    const position = pos.position;
                    const points = POINTS_SYSTEM[position] || 0;

                    this.raceResults.push({
                        track: race.circuit_short_name || race.location,
                        position: position.toString(),
                        no: driver.driver_number,
                        driver: driver.broadcast_name,
                        team: driver.team_name,
                        startingGrid: 0,
                        laps: 0,
                        timeRetired: '',
                        points: points,
                        setFastestLap: false,
                        fastestLapTime: '',
                    });
                    addedCount++;
                });

                console.log(`   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –í—Å–µ–≥–æ –≤ –±–∞–∑–µ: ${this.raceResults.length}`);

            } catch (error) {
                console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–æ–Ω–∫–∏:`, error);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≥–æ–Ω–æ–∫
            }
        }
    }

    private getFinalPositions(positions: any[]): any[] {
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ driver_number –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é
        const driverMap = new Map();

        positions.forEach(pos => {
            const existing = driverMap.get(pos.driver_number);
            if (!existing || new Date(pos.date) > new Date(existing.date)) {
                driverMap.set(pos.driver_number, pos);
            }
        });

        return Array.from(driverMap.values())
            .filter(p => p.position > 0) // –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            .sort((a, b) => a.position - b.position);
    }

    getRaceResults(): RaceResult[] {
        console.log(`üîç getRaceResults() –≤—ã–∑–≤–∞–Ω: –≤–æ–∑–≤—Ä–∞—â–∞—é ${this.raceResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
        return this.raceResults;
    }

    getQualifyingResults(): QualifyingResult[] {
        return this.qualifyingResults;
    }

    getRacesByTrack(track: string): RaceResult[] {
        const results = this.raceResults.filter(r =>
            r.track.toLowerCase().includes(track.toLowerCase())
        );
        console.log(`üîç getRacesByTrack("${track}"): –Ω–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
        return results;
    }

    getDriverResults(driverName: string): RaceResult[] {
        const results = this.raceResults.filter(r =>
            r.driver.toLowerCase().includes(driverName.toLowerCase())
        );
        console.log(`üîç getDriverResults("${driverName}"): –Ω–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
        return results;
    }

    getAllTracks(): string[] {
        const tracks = [...new Set(this.raceResults.map(r => r.track))];
        console.log(`üîç getAllTracks(): –Ω–∞–π–¥–µ–Ω–æ ${tracks.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞—Å—Å:`, tracks);
        return tracks;
    }

    getAllDrivers(): string[] {
        const drivers = this.drivers.map(d => d.broadcast_name).sort();
        console.log(`üîç getAllDrivers(): ${drivers.length} –ø–∏–ª–æ—Ç–æ–≤`);
        return drivers;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
     */
    isReady(): boolean {
        const ready = this.isInitialized && this.raceResults.length > 0;
        console.log(`üîç isReady(): ${ready} (initialized: ${this.isInitialized}, results: ${this.raceResults.length})`);
        return ready;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
     */
    getLastUpdateInfo(): string {
        if (this.lastUpdate === 0) {
            return '–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...';
        }
        const minutes = Math.floor((Date.now() - this.lastUpdate) / 60000);
        return `–û–±–Ω–æ–≤–ª–µ–Ω–æ ${minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
    }

    /**
     * –î–ï–ë–ê–ì: –í—ã–≤–µ—Å—Ç–∏ –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    debugPrintStats(): void {
        console.log('\n' + '='.repeat(60));
        console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ê–ù–ù–´–• F1');
        console.log('='.repeat(60));
        console.log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${this.isInitialized}`);
        console.log(`–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: ${this.isLoading}`);
        console.log(`–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${this.lastUpdate ? new Date(this.lastUpdate).toISOString() : '–Ω–∏–∫–æ–≥–¥–∞'}`);
        console.log(`\n–ü–∏–ª–æ—Ç—ã: ${this.drivers.length}`);
        console.log(`–ì–æ–Ω–∫–∏: ${this.races.length}`);
        console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${this.raceResults.length}`);
        console.log(`–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–∞—Å—Å—ã: ${this.getAllTracks().length}`);
        console.log(`–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∏–ª–æ—Ç—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö: ${new Set(this.raceResults.map(r => r.driver)).size}`);
        console.log('='.repeat(60) + '\n');
    }
}

// Singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const f1Data = new OpenF1DataParser();
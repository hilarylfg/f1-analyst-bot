import {f1Data} from "../openf1/openf1-parser.js";

export interface DriverStanding {
    position: number;
    driver: string;
    team: string;
    points: number;
    wins: number;
    podiums: number;
    polePositions: number;
    fastestLaps: number;
    dnfs: number;
}

export interface TeamStanding {
    position: number;
    team: string;
    points: number;
    wins: number;
    podiums: number;
}

export class ChampionshipCalculator {

    getDriverStandings(): DriverStanding[] {
        const results = f1Data.getRaceResults();
        const driverMap = new Map<string, DriverStanding>();

        results.forEach(result => {
            if (!driverMap.has(result.driver)) {
                const currentTeam = f1Data.getCurrentTeam(result.no) || result.team;

                driverMap.set(result.driver, {
                    position: 0,
                    driver: result.driver,
                    team: currentTeam,
                    points: 0,
                    wins: 0,
                    podiums: 0,
                    polePositions: 0,
                    fastestLaps: 0,
                    dnfs: 0,
                });
            }

            const standing = driverMap.get(result.driver)!;

            // –û—á–∫–∏ –≤—Å–µ–≥–¥–∞
            standing.points += result.points;

            // –ü–æ–±–µ–¥—ã —Ç–æ–ª—å–∫–æ –≤ –≥–æ–Ω–∫–∞—Ö
            if (result.position === '1' && !result.isSprint && result.isClassified) {
                standing.wins++;
            }

            // –ü–æ–¥–∏—É–º—ã —Ç–æ–ª—å–∫–æ –≤ –≥–æ–Ω–∫–∞—Ö
            if (['1', '2', '3'].includes(result.position) && !result.isSprint && result.isClassified) {
                standing.podiums++;
            }

            if (result.setFastestLap) standing.fastestLaps++;

            if (!result.isClassified || result.position === 'NC') {
                standing.dnfs++;
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—É–ª-–ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const qualifyingResults = f1Data.getQualifyingResults();
        qualifyingResults.forEach(q => {
            if (q.position === 1 && driverMap.has(q.driver)) {
                driverMap.get(q.driver)!.polePositions++;
            }
        });

        const standings = Array.from(driverMap.values())
            .sort((a, b) => b.points - a.points);

        standings.forEach((standing, index) => {
            standing.position = index + 1;
        });

        return standings;
    }

    /**
     * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°—á–∏—Ç–∞–µ–º –æ—á–∫–∏ –∫–æ–º–∞–Ω–¥ –ù–ê–ü–†–Ø–ú–£–Æ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤,
     * –∞ –ù–ï —á–µ—Ä–µ–∑ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∫–æ–≤ –ø–∏–ª–æ—Ç–æ–≤ (—á—Ç–æ–±—ã —É—á–µ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—ã)
     */
    getTeamStandings(): TeamStanding[] {
        const results = f1Data.getRaceResults();
        const teamMap = new Map<string, TeamStanding>();

        // ‚úÖ –°—á–∏—Ç–∞–µ–º –æ—á–∫–∏ –ù–ê–ü–†–Ø–ú–£–Æ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –≥–æ–Ω–∫–∏!)
        results.forEach(result => {
            if (!teamMap.has(result.team)) {
                teamMap.set(result.team, {
                    position: 0,
                    team: result.team,
                    points: 0,
                    wins: 0,
                    podiums: 0,
                });
            }

            const team = teamMap.get(result.team)!;

            // ‚úÖ –û—á–∫–∏ - –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –≥–æ–Ω–∫–∏)
            team.points += result.points;

            // ‚úÖ –ü–æ–±–µ–¥—ã - —Ç–æ–ª—å–∫–æ –≥–æ–Ω–∫–∏ (–Ω–µ —Å–ø—Ä–∏–Ω—Ç—ã)
            if (result.position === '1' && !result.isSprint && result.isClassified) {
                team.wins++;
            }

            // ‚úÖ –ü–æ–¥–∏—É–º—ã - —Ç–æ–ª—å–∫–æ –≥–æ–Ω–∫–∏ (–Ω–µ —Å–ø—Ä–∏–Ω—Ç—ã)
            if (['1', '2', '3'].includes(result.position) && !result.isSprint && result.isClassified) {
                team.podiums++;
            }
        });

        const standings = Array.from(teamMap.values())
            .sort((a, b) => b.points - a.points);

        standings.forEach((standing, index) => {
            standing.position = index + 1;
        });

        return standings;
    }

    formatDriverStandings(): string {
        const standings = this.getDriverStandings().slice(0);

        let output = 'üèÜ **–ß–ï–ú–ü–ò–û–ù–ê–¢ –ü–ò–õ–û–¢–û–í 2025**\n\n';
        output += '```\n';
        output += '–ü–æ–∑  –ü–∏–ª–æ—Ç                    –û—á–∫–∏  –ü  –ü–æ–¥–∏—É–º\n';
        output += '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n';

        standings.forEach(s => {
            const pos = s.position.toString().padEnd(4);
            const name = s.driver.padEnd(24);
            const points = s.points.toString().padStart(4);
            const wins = s.wins.toString().padStart(2);
            const podiums = s.podiums.toString().padStart(6);
            output += `${pos} ${name} ${points}  ${wins}  ${podiums}\n`;
        });

        output += '```\n';
        output += '\n*–ü - –ü–æ–±–µ–¥—ã –≤ –≥–æ–Ω–∫–∞—Ö (—Å–ø—Ä–∏–Ω—Ç—ã –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è)*';

        return output;
    }

    formatTeamStandings(limit: number = 10): string {
        const standings = this.getTeamStandings().slice(0, limit);

        let output = 'üèÅ **–ß–ï–ú–ü–ò–û–ù–ê–¢ –ö–û–ù–°–¢–†–£–ö–¢–û–†–û–í 2025**\n\n';
        output += '```\n';
        output += '–ü–æ–∑  –ö–æ–º–∞–Ω–¥–∞                       –û—á–∫–∏  –ü–æ–±–µ–¥\n';
        output += '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n';

        standings.forEach(s => {
            const pos = s.position.toString().padEnd(4);
            const team = s.team.padEnd(28);
            const points = s.points.toString().padStart(5);
            const wins = s.wins.toString().padStart(6);

            output += `${pos} ${team} ${points} ${wins}\n`;
        });

        output += '```';

        return output;
    }
}

export const championship = new ChampionshipCalculator();
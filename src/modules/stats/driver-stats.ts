import {f1Data} from "../openf1/openf1-parser.js";

export class DriverStatsCalculator {

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–∏–ª–æ—Ç–∞
     */
    getDriverProfile(driverName: string): string {
        const results = f1Data.getDriverResults(driverName);

        if (results.length === 0) {
            return `‚ùå –ü–∏–ª–æ—Ç "${driverName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`;
        }

        const driver = results[0].driver;
        const driverNo = results[0].no;
        const currentTeam = f1Data.getCurrentTeam(driverNo) || results[results.length - 1].team;

        const totalPoints = results.reduce((sum, r) => sum + r.points, 0);

        const wins = results.filter(r =>
            r.position === '1' && !r.isSprint && r.isClassified
        ).length;

        const podiums = results.filter(r =>
            ['1', '2', '3'].includes(r.position) && !r.isSprint && r.isClassified
        ).length;

        // ‚úÖ DNF/DNS/DSQ –∏–∑ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
        const dnfs = results.filter(r => r.isDNF || r.isDNS || r.isDSQ).length;

        const finishRate = results.length > 0
            ? ((results.length - dnfs) / results.length * 100).toFixed(1)
            : '0.0';

        const classifiedResults = results.filter(r => r.isClassified);
        const avgPosition = classifiedResults.length > 0
            ? (classifiedResults.reduce((sum, r) => sum + parseInt(r.position), 0) / classifiedResults.length).toFixed(1)
            : 'N/A';

        // ‚úÖ –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ø–æ—É–ª-–ø–æ–∑–∏—Ü–∏–∏)
        const qualifyingResults = f1Data.getQualifyingResults().filter(q =>
            q.driver.toLowerCase().includes(driverName.toLowerCase())
        );
        const polePositions = qualifyingResults.filter(q => q.position === 1).length;

        // –ü–æ–∑–∏—Ü–∏—è –≤ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ
        const standings = f1Data.getRaceResults();
        const driverStandings = new Map<string, number>();
        standings.forEach(r => {
            const current = driverStandings.get(r.driver) || 0;
            driverStandings.set(r.driver, current + r.points);
        });
        const sortedStandings = Array.from(driverStandings.entries())
            .sort((a, b) => b[1] - a[1]);
        const championshipPosition = sortedStandings.findIndex(([name]) => name === driver) + 1;

        let output = `üë§ **${driver}**\n`;
        output += `üèéÔ∏è –ö–æ–º–∞–Ω–¥–∞: ${currentTeam}\n\n`;
        output += `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–∑–æ–Ω–∞:**\n`;
        output += `‚Ä¢ –ü–æ–∑–∏—Ü–∏—è –≤ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ: ${championshipPosition}\n`;
        output += `‚Ä¢ –û—á–∫–∏: ${totalPoints}\n`;
        output += `‚Ä¢ –ü–æ–±–µ–¥—ã: ${wins} | –ü–æ–¥–∏—É–º—ã: ${podiums}\n`;
        output += `‚Ä¢ –ü–æ—É–ª-–ø–æ–∑–∏—Ü–∏–∏: ${polePositions}\n`; // ‚úÖ –£–±—Ä–∞–ª–∏ –±—ã—Å—Ç—Ä–µ–π—à–∏–µ –∫—Ä—É–≥–∏
        output += `‚Ä¢ DNF/DNS/DSQ: ${dnfs}\n`;
        output += `‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è: ${avgPosition}\n`;
        output += `‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —Ñ–∏–Ω–∏—à–µ–π: ${finishRate}%\n\n`;

        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —É–∏–∫-—ç–Ω–¥–æ–≤
        output += `üèÅ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —É–∏–∫-—ç–Ω–¥–æ–≤:**\n`;

        const trackResults = new Map<string, typeof results>();
        results.forEach(r => {
            if (!trackResults.has(r.track)) {
                trackResults.set(r.track, []);
            }
            trackResults.get(r.track)!.push(r);
        });

        const recentTracks = Array.from(trackResults.entries())
            .sort((a, b) => new Date(b[1][0].date).getTime() - new Date(a[1][0].date).getTime())
            .slice(0, 5);

        recentTracks.forEach(([track, trackResults]) => {
            const sorted = trackResults.sort((a, b) =>
                new Date(a.date).getTime() - new Date(b.date).getTime()
            );

            output += `${track}: `;

            sorted.forEach((r, index) => {
                const type = r.isSprint ? 'Sprint' : 'Race';
                const prelim = r.isPreliminary ? '‚ö†Ô∏è' : '';

                // ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º DSQ, DNF, DNS –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                let positionStr = '';
                if (r.isDSQ) positionStr = 'DSQ';
                else if (r.isDNF) positionStr = 'DNF';
                else if (r.isDNS) positionStr = 'DNS';
                else positionStr = `P${r.position}`;

                output += `${type}: ${positionStr}${prelim}`;
                if (index < sorted.length - 1) output += ', ';
            });

            output += '\n';
        });

        return output;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º—É –ø–∏–ª–æ—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –≥–æ–Ω–æ–∫)
     */
    getDriverForm(driverName: string): string {
        const results = f1Data.getDriverResults(driverName);

        if (results.length === 0) {
            return `‚ùå –ü–∏–ª–æ—Ç "${driverName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`;
        }

        const driver = results[0].driver;
        const driverNo = results[0].no;
        const currentTeam = f1Data.getCurrentTeam(driverNo) || results[results.length - 1].team;

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç—Ä–∞—Å—Å–∞–º
        const trackResults = new Map<string, typeof results>();
        results.forEach(r => {
            if (!trackResults.has(r.track)) {
                trackResults.set(r.track, []);
            }
            trackResults.get(r.track)!.push(r);
        });

        // –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞—Å—Å
        const recentTracks = Array.from(trackResults.entries())
            .sort((a, b) => new Date(b[1][0].date).getTime() - new Date(a[1][0].date).getTime())
            .slice(0, 5);

        let output = `üìà **–§–æ—Ä–º–∞ –ø–∏–ª–æ—Ç–∞: ${driver}** (${currentTeam})\n\n`;

        recentTracks.forEach(([track, trackResults]) => {
            const dateStr = new Date(trackResults[0].date).toISOString().split('T')[0];

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
            const sorted = trackResults.sort((a, b) =>
                new Date(a.date).getTime() - new Date(b.date).getTime()
            );

            output += `**${track}** (${dateStr})\n`;

            sorted.forEach(r => {
                const type = r.isSprint ? 'üèÉ Sprint' : 'üèÅ Race';
                const prelim = r.isPreliminary ? ' ‚ö†Ô∏è' : '';

                // –ü–æ–∑–∏—Ü–∏—è
                let positionStr = '';
                if (!r.isClassified) {
                    positionStr = 'DNF/DNS';
                } else if (r.position === 'NC') {
                    positionStr = 'DSQ';
                } else {
                    positionStr = `P${r.position}`;
                }

                // –≠–º–æ–¥–∑–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                let emoji = '';
                if (r.position === '1' && r.isClassified) emoji = 'ü•á';
                else if (r.position === '2' && r.isClassified) emoji = 'ü•à';
                else if (r.position === '3' && r.isClassified) emoji = 'ü•â';
                else if (!r.isClassified || r.position === 'NC') emoji = '‚ùå';
                else if (parseInt(r.position) <= 10) emoji = '‚úÖ';
                else emoji = '‚ö™';

                output += `   ${emoji} ${type}: ${positionStr} (+${r.points} –æ—á–∫–æ–≤)${prelim}\n`;

                if (r.gap && r.gap !== '0') {
                    output += `      –û—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ: ${r.gap}\n`;
                }
            });

            output += '\n';
        });

        return output;
    }
}

export const driverStats = new DriverStatsCalculator();
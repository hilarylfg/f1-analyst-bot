import TelegramBot, {type Message} from 'node-telegram-bot-api';
import {analyzeDriverComparison} from './modules/analysis/comparison.js';
import {askAI} from './modules/ai/open-router.js';
import {findOrCreateUser, grantConsent} from './core/user-service.js';
import {PrismaClient} from '@prisma/client';
import {AIRacePredictor} from "./modules/analysis/ai-race-predictor.js";
import { championship } from './modules/stats/championship.js';
import { driverStats } from './modules/stats/driver-stats.js';
import {f1Data} from "./modules/openf1/openf1-parser.js";

const prisma = new PrismaClient();

export class F1Bot {
    private bot: TelegramBot;
    private openRouterKey?: string;
    private aiPredictor?: AIRacePredictor;
    private isDataReady: boolean = false;

    constructor(token: string, openRouterKey?: string) {
        this.bot = new TelegramBot(token, {polling: true});
        this.openRouterKey = openRouterKey;
        this.aiPredictor = openRouterKey ? new AIRacePredictor(openRouterKey) : undefined;
    }

    private async onAnyMessage(msg: Message) {
        if (!msg.from || !msg.text) return;

        try {
            const user = await findOrCreateUser(msg.from);
            await prisma.message.create({
                data: {
                    userId: user.id,
                    role: 'user',
                    content: msg.text,
                }
            });
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –≤ onAnyMessage middleware:", error);
        }
    }

    private splitMessage(text: string, maxLength: number): string[] {
        const parts: string[] = [];
        let current = '';

        text.split('\n').forEach(line => {
            if ((current + line + '\n').length > maxLength) {
                parts.push(current);
                current = line + '\n';
            } else {
                current += line + '\n';
            }
        });

        if (current) parts.push(current);
        return parts;
    }

    private setupCommands() {
        this.bot.on('message', this.onAnyMessage.bind(this));

        this.bot.onText(/\/start/, async (msg) => {
            const chatId = msg.chat.id;
            const policyText = "–î–ª—è —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –Ω–∞—à—É –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.";
            const options = {
                reply_markup: {
                    inline_keyboard: [
                        [{text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É v1.0", callback_data: "consent_accept_v1.0"}],
                        [{text: "üìÑ –ß–∏—Ç–∞—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É (—Å—Å—ã–ª–∫–∞)", url: "https://github.com/hilarylfg"}]
                    ]
                }
            };
            await this.bot.sendMessage(chatId, `üèéÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ F1 Analyst Bot!\n\n${policyText}`, options);
        });

        this.bot.on('callback_query', async (query) => {
            if (query.data === 'consent_accept_v1.0' && query.from && query.message) {
                const user = await findOrCreateUser(query.from);
                await grantConsent(user.id, '1.0');
                await this.bot.answerCallbackQuery(query.id, {text: "–°–ø–∞—Å–∏–±–æ! –°–æ–≥–ª–∞—Å–∏–µ –ø—Ä–∏–Ω—è—Ç–æ."});
                await this.bot.editMessageText("–°–æ–≥–ª–∞—Å–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.", {
                    chat_id: query.message.chat.id,
                    message_id: query.message.message_id,
                });
                await this.bot.sendMessage(query.message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.");
            }
        });

        // === –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ ===

        // –¢–∞–±–ª–∏—Ü–∞ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ –ø–∏–ª–æ—Ç–æ–≤
        this.bot.onText(/\/standings/, async (msg) => {
            const chatId = msg.chat.id;
            try {
                const standings = championship.formatDriverStandings();
                await this.bot.sendMessage(chatId, standings, { parse_mode: 'Markdown' });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ /standings:', error);
                await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞.');
            }
        });

        // –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤
        this.bot.onText(/\/constructors/, async (msg) => {
            const chatId = msg.chat.id;
            try {
                const standings = championship.formatTeamStandings();
                await this.bot.sendMessage(chatId, standings, { parse_mode: 'Markdown' });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ /constructors:', error);
                await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤.');
            }
        });

        // –ü—Ä–æ—Ñ–∏–ª—å –ø–∏–ª–æ—Ç–∞
        this.bot.onText(/\/driver (.+)/, async (msg, match) => {
            const chatId = msg.chat.id;
            const driverName = match?.[1];

            if (!driverName) {
                return this.bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /driver [–∏–º—è –ø–∏–ª–æ—Ç–∞]');
            }

            try {
                const profile = driverStats.getDriverProfile(driverName);
                await this.bot.sendMessage(chatId, profile, { parse_mode: 'Markdown' });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ /driver:', error);
                await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–∏–ª–æ—Ç–∞.');
            }
        });

        // –§–æ—Ä–º–∞ –ø–∏–ª–æ—Ç–∞
        this.bot.onText(/\/form (.+)/, async (msg, match) => {
            const chatId = msg.chat.id;
            const driverName = match?.[1];

            if (!driverName) {
                return this.bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /form [–∏–º—è –ø–∏–ª–æ—Ç–∞]');
            }

            try {
                const form = driverStats.getDriverForm(driverName);
                await this.bot.sendMessage(chatId, form, { parse_mode: 'Markdown' });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ /form:', error);
                await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã –ø–∏–ª–æ—Ç–∞.');
            }
        });

        // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∏–ª–æ—Ç–æ–≤
        this.bot.onText(/\/drivers/, async (msg) => {
            const chatId = msg.chat.id;
            try {
                const drivers = f1Data.getAllDrivers();
                let output = 'üë• **–í—Å–µ –ø–∏–ª–æ—Ç—ã —Å–µ–∑–æ–Ω–∞ 2025:**\n\n';
                drivers.forEach((driver, i) => {
                    output += `${i + 1}. ${driver}\n`;
                });
                await this.bot.sendMessage(chatId, output, { parse_mode: 'Markdown' });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ /drivers:', error);
                await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∏–ª–æ—Ç–æ–≤.');
            }
        });

        this.bot.onText(/\/help/, (msg) => {
            const helpText = `*üèéÔ∏è F1 Analyst Bot - –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n` +
                `*üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ OpenF1 API):*\n` +
                `/standings - –¢–∞–±–ª–∏—Ü–∞ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ –ø–∏–ª–æ—Ç–æ–≤\n` +
                `/constructors - –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤\n` +
                `/driver [–∏–º—è] - –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–∏–ª–æ—Ç–∞\n` +
                `/form [–∏–º—è] - –§–æ—Ä–º–∞ –ø–∏–ª–æ—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –≥–æ–Ω–æ–∫)\n` +
                `/points [–∏–º—è] - –î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –æ—á–∫–æ–≤ –ø–∏–ª–æ—Ç–∞\n` +
                `/drivers - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∏–ª–æ—Ç–æ–≤\n` +
                `/teams - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Å –æ—á–∫–∞–º–∏\n\n` +
                `*ü§ñ –ò–ò-–ê–ù–ê–õ–ò–ó:*\n` +
                `/compare [–ø–∏–ª–æ—Ç1] [–ø–∏–ª–æ—Ç2] - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –ø–∏–ª–æ—Ç–æ–≤\n` +
                `/ask [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –§–æ—Ä–º—É–ª–µ 1\n` +
                `/predict [—Ç—Ä–∞—Å—Å–∞] - –ü—Ä–µ–¥–∏–∫—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–Ω–∫–∏\n\n` +
                `*üí° –ü—Ä–∏–º–µ—Ä—ã:*\n` +
                `\`/driver Piastri\`\n` +
                `\`/form Norris\`\n` +
                `\`/points Hamilton\`\n` +
                `\`/teams\`\n` +
                `\`/compare Verstappen Norris\`\n` +
                `\`/ask –ü–æ—á–µ–º—É McLaren —Ç–∞–∫ –±—ã—Å—Ç—Ä –≤ —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ?\`\n\n` +
                `*üîß –î–µ–±–∞–≥:*\n` +
                `/check\\_driver [–∏–º—è] - –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–ª–æ—Ç–∞\n` +
                `/check\\_team [–∫–æ–º–∞–Ω–¥–∞] - –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã\n\n` +
                `_–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç_`;

            this.bot.sendMessage(msg.chat.id, helpText, {parse_mode: 'Markdown'});
        });

        // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Å –æ—á–∫–∞–º–∏
        this.bot.onText(/\/teams/, async (msg) => {
            const chatId = msg.chat.id;

            if (!this.isDataReady) {
                return this.bot.sendMessage(chatId, '‚è≥ –î–∞–Ω–Ω—ã–µ –µ—â—ë –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...');
            }

            try {
                const allResults = f1Data.getRaceResults();

                const teamPoints = new Map<string, {
                    total: number,
                    race: number,
                    sprint: number,
                    drivers: Set<string>
                }>();

                allResults.forEach(r => {
                    if (!teamPoints.has(r.team)) {
                        teamPoints.set(r.team, {
                            total: 0,
                            race: 0,
                            sprint: 0,
                            drivers: new Set()
                        });
                    }

                    const team = teamPoints.get(r.team)!;
                    team.total += r.points;
                    if (r.isSprint) {
                        team.sprint += r.points;
                    } else {
                        team.race += r.points;
                    }
                    team.drivers.add(r.driver);
                });

                const sortedTeams = Array.from(teamPoints.entries())
                    .sort((a, b) => b[1].total - a[1].total);

                let output = 'üèÅ **–í–°–ï –ö–û–ú–ê–ù–î–´ –°–ï–ó–û–ù–ê 2025**\n\n';

                sortedTeams.forEach(([teamName, data], index) => {
                    const drivers = Array.from(data.drivers).join(', ');
                    output += `**${index + 1}. ${teamName}** ‚Äî ${data.total} –æ—á–∫–æ–≤\n`;
                    output += `   üë• –ü–∏–ª–æ—Ç—ã: ${drivers}\n\n`;
                });

                await this.bot.sendMessage(chatId, output, { parse_mode: 'Markdown' });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ /teams:', error);
                await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.');
            }
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã (–¥–µ–±–∞–≥)
        this.bot.onText(/\/check_team (.+)/, async (msg, match) => {
            const chatId = msg.chat.id;

            if (!this.isDataReady) {
                return this.bot.sendMessage(chatId, '‚è≥ –î–∞–Ω–Ω—ã–µ –µ—â—ë –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...');
            }

            const teamName = match?.[1];
            if (!teamName) {
                return this.bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check_team [–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã]');
            }

            try {
                const allResults = f1Data.getRaceResults();

                // –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–∞–Ω–¥—ã
                const teamResults = allResults.filter(r =>
                    r.team.toLowerCase().includes(teamName.toLowerCase())
                );

                if (teamResults.length === 0) {
                    return this.bot.sendMessage(chatId, `‚ùå –ö–æ–º–∞–Ω–¥–∞ "${teamName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
                }

                const fullTeamName = teamResults[0].team;

                // –ü–æ–¥—Å—á—ë—Ç –æ—á–∫–æ–≤
                const totalPoints = teamResults.reduce((sum, r) => sum + r.points, 0);
                const racePoints = teamResults.filter(r => !r.isSprint).reduce((sum, r) => sum + r.points, 0);
                const sprintPoints = teamResults.filter(r => r.isSprint).reduce((sum, r) => sum + r.points, 0);

                // –ü–∏–ª–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã
                const driversSet = new Set(teamResults.map(r => r.driver));
                const drivers = Array.from(driversSet);

                // –û—á–∫–∏ –ø–æ –ø–∏–ª–æ—Ç–∞–º
                const driverPoints = new Map<string, number>();
                teamResults.forEach(r => {
                    const current = driverPoints.get(r.driver) || 0;
                    driverPoints.set(r.driver, current + r.points);
                });

                let output = `üèéÔ∏è **${fullTeamName}**\n\n`;
                output += `üìä **–ò–¢–û–ì–û –û–ß–ö–û–í: ${totalPoints}**\n`;
                output += `   üèÅ –ò–∑ –≥–æ–Ω–æ–∫: ${racePoints}\n`;
                output += `   üèÉ –ò–∑ —Å–ø—Ä–∏–Ω—Ç–æ–≤: ${sprintPoints}\n\n`;

                output += `üë• **–ü–ò–õ–û–¢–´:**\n`;
                drivers.forEach(driver => {
                    const points = driverPoints.get(driver) || 0;
                    output += `   ‚Ä¢ ${driver}: ${points} –æ—á–∫–æ–≤\n`;
                });

                output += `\nüìã **–í–°–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ (–≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ):**\n\n`;

                teamResults.forEach((r, index) => {
                    const type = r.isSprint ? 'üèÉ Sprint' : 'üèÅ Race';
                    const prelim = r.isPreliminary ? ' ‚ö†Ô∏è' : '';
                    const dateStr = new Date(r.date).toISOString().split('T')[0];

                    output += `${index + 1}. **${dateStr}** ${type} - ${r.track}\n`;
                    output += `   ${r.driver}: P${r.position} ‚Üí +${r.points} –æ—á–∫–æ–≤${prelim}\n\n`;
                });

                output += `_–í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${teamResults.length}_`;

                if (output.length > 4000) {
                    const parts = this.splitMessage(output, 4000);
                    for (const part of parts) {
                        await this.bot.sendMessage(chatId, part, { parse_mode: 'Markdown' });
                    }
                } else {
                    await this.bot.sendMessage(chatId, output, { parse_mode: 'Markdown' });
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ /check_team:', error);
                await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–∞–Ω–¥—ã.');
            }
        });

        this.bot.onText(/\/compare (.+) (.+)/, async (msg, match) => {
            const chatId = msg.chat.id;
            if (!this.openRouterKey) {
                return this.bot.sendMessage(chatId, "–ö–æ–º–∞–Ω–¥–∞ /compare –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: OpenRouter API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.");
            }
            const driver1 = match?.[1];
            const driver2 = match?.[2];
            if (!driver1 || !driver2) {
                return this.bot.sendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /compare [–ø–∏–ª–æ—Ç1] [–ø–∏–ª–æ—Ç2]");
            }

            await this.bot.sendMessage(chatId, "üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ–∑–æ–Ω–∞ 2025...");
            try {
                const analysis = await analyzeDriverComparison(driver1, driver2, this.openRouterKey);
                await this.bot.sendMessage(chatId, analysis, {parse_mode: 'Markdown'});
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ /compare:", error);
                await this.bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø–∏–ª–æ—Ç–æ–≤.");
            }
        });

        this.bot.onText(/\/ask (.+)/, async (msg, match) => {
            const chatId = msg.chat.id;
            if (!this.openRouterKey) {
                return this.bot.sendMessage(chatId, "–ö–æ–º–∞–Ω–¥–∞ /ask –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: OpenRouter API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.");
            }
            const question = match?.[1];
            if (!question) {
                return this.bot.sendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ask [–≤–∞—à –≤–æ–ø—Ä–æ—Å]");
            }

            await this.bot.sendMessage(chatId, "ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...");
            try {
                const answer = await askAI(question, this.openRouterKey, true);
                await this.bot.sendMessage(chatId, answer, {parse_mode: 'Markdown'});
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ /ask:", error);
                await this.bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞.");
            }
        });

        this.bot.onText(/\/predict (.+)/, async (msg, match) => {
            const chatId = msg.chat.id;
            if (!this.aiPredictor) {
                return this.bot.sendMessage(chatId, "–ö–æ–º–∞–Ω–¥–∞ /predict –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: OpenRouter API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.");
            }
            const track = match?.[1];
            if (!track) {
                return this.bot.sendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /predict [–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞—Å—Å—ã]");
            }

            await this.bot.sendMessage(chatId, "üîÆ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ–∑–æ–Ω–∞ –∏ —Å–æ—Å—Ç–∞–≤–ª—è—é –ø—Ä–µ–¥–∏–∫—Ç...");
            try {
                const prediction = await this.aiPredictor.predictRaceResults(track);
                await this.bot.sendMessage(chatId, prediction.analysis, {parse_mode: 'Markdown'});
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ /predict:", error);
                await this.bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–∏–∫—Ü–∏–∏.");
            }
        });

        // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—á–∫–∞—Ö –ø–∏–ª–æ—Ç–∞
        this.bot.onText(/\/points (.+)/, async (msg, match) => {
            const chatId = msg.chat.id;

            if (!this.isDataReady) {
                return this.bot.sendMessage(chatId, '‚è≥ –î–∞–Ω–Ω—ã–µ –µ—â—ë –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...');
            }

            const driverName = match?.[1];

            if (!driverName) {
                return this.bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /points [–∏–º—è –ø–∏–ª–æ—Ç–∞]');
            }

            try {
                const results = f1Data.getDriverResults(driverName);

                if (results.length === 0) {
                    return this.bot.sendMessage(chatId, `‚ùå –ü–∏–ª–æ—Ç "${driverName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`);
                }

                const driver = results[0].driver;
                const team = results[0].team;

                // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –≥–æ–Ω–∫–∏ –∏ —Å–ø—Ä–∏–Ω—Ç—ã
                const raceResults = results.filter(r => !r.isSprint);
                const sprintResults = results.filter(r => r.isSprint);

                // –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                const totalPoints = results.reduce((sum, r) => sum + r.points, 0);
                const racePoints = raceResults.reduce((sum, r) => sum + r.points, 0);
                const sprintPoints = sprintResults.reduce((sum, r) => sum + r.points, 0);

                const wins = raceResults.filter(r => r.position === '1').length;
                const podiums = raceResults.filter(r => ['1', '2', '3'].includes(r.position)).length;

                const sprintWins = sprintResults.filter(r => r.position === '1').length;
                const sprintPodiums = sprintResults.filter(r => ['1', '2', '3'].includes(r.position)).length;

                let output = `üèéÔ∏è **${driver}** (${team})\n\n`;
                output += `üìä **–ò–¢–û–ì–û –û–ß–ö–û–í: ${totalPoints}**\n`;
                output += `   üèÅ –ò–∑ –≥–æ–Ω–æ–∫: ${racePoints} (${raceResults.length} –≥–æ–Ω–æ–∫)\n`;
                output += `   üèÉ –ò–∑ —Å–ø—Ä–∏–Ω—Ç–æ–≤: ${sprintPoints} (${sprintResults.length} —Å–ø—Ä–∏–Ω—Ç–æ–≤)\n\n`;

                output += `üèÜ **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ì–û–ù–û–ö:**\n`;
                output += `   –ü–æ–±–µ–¥—ã: ${wins}\n`;
                output += `   –ü–æ–¥–∏—É–º—ã: ${podiums}\n\n`;

                if (sprintResults.length > 0) {
                    output += `üèÉ **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ü–†–ò–ù–¢–û–í (–Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –≤ –ø–æ–±–µ–¥–∞—Ö):**\n`;
                    output += `   –ü–æ–±–µ–¥—ã –≤ —Å–ø—Ä–∏–Ω—Ç–∞—Ö: ${sprintWins}\n`;
                    output += `   –ü–æ–¥–∏—É–º—ã –≤ —Å–ø—Ä–∏–Ω—Ç–∞—Ö: ${sprintPodiums}\n\n`;
                }

                output += `üìã **–î–ï–¢–ê–õ–¨–ù–ê–Ø –†–ê–ó–ë–ò–í–ö–ê –ü–û –ì–û–ù–ö–ê–ú:**\n\n`;

                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç—Ä–∞—Å—Å–∞–º (–º–æ–≥—É—Ç –±—ã—Ç—å –≥–æ–Ω–∫–∞ + —Å–ø—Ä–∏–Ω—Ç –Ω–∞ –æ–¥–Ω–æ–π —Ç—Ä–∞—Å—Å–µ)
                const trackMap = new Map<string, { race?: typeof results[0], sprint?: typeof results[0] }>();

                results.forEach(r => {
                    if (!trackMap.has(r.track)) {
                        trackMap.set(r.track, {});
                    }
                    const track = trackMap.get(r.track)!;
                    if (r.isSprint) {
                        track.sprint = r;
                    } else {
                        track.race = r;
                    }
                });

                trackMap.forEach((data, track) => {
                    output += `**${track}:**\n`;

                    if (data.race) {
                        const emoji = data.race.position === '1' ? 'ü•á' :
                            data.race.position === '2' ? 'ü•à' :
                                data.race.position === '3' ? 'ü•â' : 'üèÅ';
                        const preliminary = data.race.isPreliminary ? ' ‚ö†Ô∏è _–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ_' : '';
                        output += `   ${emoji} –ì–æ–Ω–∫–∞: P${data.race.position} ‚Üí **+${data.race.points} –æ—á–∫–æ–≤**${preliminary}\n`;
                    }

                    if (data.sprint) {
                        const emoji = data.sprint.position === '1' ? 'ü•á' :
                            data.sprint.position === '2' ? 'ü•à' :
                                data.sprint.position === '3' ? 'ü•â' : 'üèÉ';
                        const preliminary = data.sprint.isPreliminary ? ' ‚ö†Ô∏è _–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ_' : '';
                        output += `   ${emoji} –°–ø—Ä–∏–Ω—Ç: P${data.sprint.position} ‚Üí **+${data.sprint.points} –æ—á–∫–æ–≤**${preliminary}\n`;
                    }

                    output += '\n';
                });

                output += `_–í—Å–µ–≥–æ —ç—Ç–∞–ø–æ–≤: ${trackMap.size}_`;

                await this.bot.sendMessage(chatId, output, { parse_mode: 'Markdown' });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ /points:', error);
                await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—á–∫–∞—Ö.');
            }
        });

        this.bot.onText(/\/check_duplicates/, async (msg) => {
            const chatId = msg.chat.id;

            if (!this.isDataReady) {
                return this.bot.sendMessage(chatId, '‚è≥ –î–∞–Ω–Ω—ã–µ –µ—â—ë –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...');
            }

            try {
                const allResults = f1Data.getRaceResults();

                // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∏–ª–æ—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏
                const driverNames = new Map<string, Set<number>>();
                allResults.forEach(r => {
                    if (!driverNames.has(r.driver)) {
                        driverNames.set(r.driver, new Set());
                    }
                    driverNames.get(r.driver)!.add(r.no);
                });

                // –ò—â–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–æ–º–µ—Ä—É
                const driversByNumber = new Map<number, Set<string>>();
                allResults.forEach(r => {
                    if (!driversByNumber.has(r.no)) {
                        driversByNumber.set(r.no, new Set());
                    }
                    driversByNumber.get(r.no)!.add(r.driver);
                });

                let output = 'üîç **–ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í –ü–ò–õ–û–¢–û–í**\n\n';

                // –ù–∞—Ö–æ–¥–∏–º –ø–∏–ª–æ—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –ø–æ–¥ –æ–¥–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º
                const duplicates: string[] = [];
                driversByNumber.forEach((names, number) => {
                    if (names.size > 1) {
                        const nameList = Array.from(names).join(' / ');

                        // –°—á–∏—Ç–∞–µ–º –æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–º–µ–Ω–∏
                        const pointsInfo: string[] = [];
                        names.forEach(name => {
                            const results = allResults.filter(r => r.no === number && r.driver === name);
                            const points = results.reduce((sum, r) => sum + r.points, 0);
                            const races = results.length;
                            pointsInfo.push(`  ‚Ä¢ "${name}": ${points} –æ—á–∫–æ–≤ (${races} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)`);
                        });

                        duplicates.push(`**#${number}:** ${nameList}\n${pointsInfo.join('\n')}`);
                    }
                });

                if (duplicates.length > 0) {
                    output += '‚ö†Ô∏è **–ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–ö–ê–¢–´:**\n\n';
                    output += duplicates.join('\n\n');
                } else {
                    output += '‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ';
                }

                await this.bot.sendMessage(chatId, output, { parse_mode: 'Markdown' });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ /check_duplicates:', error);
                await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.');
            }
        });

        this.bot.onText(/\/check_driver (.+)/, async (msg, match) => {
            const chatId = msg.chat.id;

            if (!this.isDataReady) {
                return this.bot.sendMessage(chatId, '‚è≥ –î–∞–Ω–Ω—ã–µ –µ—â—ë –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...');
            }

            const driverName = match?.[1];
            if (!driverName) {
                return this.bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check_driver [–∏–º—è]');
            }

            try {
                const results = f1Data.getDriverResults(driverName);

                if (results.length === 0) {
                    return this.bot.sendMessage(chatId, `‚ùå –ü–∏–ª–æ—Ç "${driverName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
                }

                const driver = results[0].driver;
                const driverNo = results[0].no;

                let output = `üîç **–î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: ${driver} (#${driverNo})**\n\n`;

                const teamPoints = new Map<string, number>();
                results.forEach(r => {
                    const current = teamPoints.get(r.team) || 0;
                    teamPoints.set(r.team, current + r.points);
                });

                output += `üìä **–û–ß–ö–ò –ü–û –ö–û–ú–ê–ù–î–ê–ú:**\n`;
                teamPoints.forEach((points, team) => {
                    output += `   ${team}: ${points} –æ—á–∫–æ–≤\n`;
                });

                output += `\nüìã **–í–°–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ (–≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ):**\n\n`;

                results.forEach((r, index) => {
                    const type = r.isSprint ? 'üèÉ Sprint' : 'üèÅ Race';
                    const prelim = r.isPreliminary ? ' ‚ö†Ô∏è' : '';
                    const dateStr = new Date(r.date).toISOString().split('T')[0];

                    output += `${index + 1}. **${dateStr}** ${type} - ${r.track}\n`;
                    output += `   P${r.position} | ${r.team} | +${r.points} –æ—á–∫–æ–≤${prelim}\n\n`;
                });

                output += `\n_–í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${results.length}_`;

                if (output.length > 4000) {
                    const parts = this.splitMessage(output, 4000);
                    for (const part of parts) {
                        await this.bot.sendMessage(chatId, part, { parse_mode: 'Markdown' });
                    }
                } else {
                    await this.bot.sendMessage(chatId, output, { parse_mode: 'Markdown' });
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ /check_driver:', error);
                await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∏–ª–æ—Ç–∞.');
            }
        });
    }

    async start() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ F1 Analyst Bot...');
        console.log('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ OpenF1 API...');

        await f1Data.initialize();

        this.isDataReady = f1Data.isReady();

        if (!this.isDataReady) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –Ω–æ –∫–æ–º–∞–Ω–¥—ã –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.');
        } else {
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
            console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${f1Data.getRaceResults().length}`);
            console.log(`üìã –¢—Ä–∞—Å—Å: ${f1Data.getAllTracks().length}`);
        }

        this.setupCommands();
        console.log("‚úÖ F1 Analyst Bot –∑–∞–ø—É—â–µ–Ω —Å OpenF1 API! –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.");
    }
}